name: Release

on:
  release:
    types: [published]

jobs:
  publish-python:
    name: Publish Python SDK to PyPI
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Extract version from tag
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Releasing version: $VERSION"

    - name: Update version in setup.py
      working-directory: ./python
      run: |
        sed -i 's/version="[^"]*"/version="${{ steps.get_version.outputs.VERSION }}"/' setup.py

    - name: Build package
      working-directory: ./python
      run: |
        python -m build

    - name: Check package
      working-directory: ./python
      run: |
        twine check dist/*

    - name: Publish to Test PyPI
      working-directory: ./python
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        twine upload --repository testpypi dist/*

    - name: Test installation from Test PyPI
      run: |
        pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ fursight-sdk==${{ steps.get_version.outputs.VERSION }}
        python -c "import fursight; print('Python SDK installed successfully')"

    - name: Publish to PyPI
      working-directory: ./python
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*

  publish-javascript:
    name: Publish JavaScript SDK to NPM
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'

    - name: Extract version from tag
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Releasing version: $VERSION"

    - name: Update version in package.json
      working-directory: ./javascript
      run: |
        npm version ${{ steps.get_version.outputs.VERSION }} --no-git-tag-version

    - name: Install dependencies
      working-directory: ./javascript
      run: npm ci

    - name: Run tests
      working-directory: ./javascript
      run: npm test

    - name: Build package
      working-directory: ./javascript
      run: npm run build

    - name: Publish to NPM
      working-directory: ./javascript
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: npm publish --access public

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [publish-python, publish-javascript]
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Extract version from tag
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        # Extract changelog for this version
        VERSION=${{ steps.get_version.outputs.VERSION }}
        
        # Create release notes from CHANGELOG.md
        if grep -q "## \[$VERSION\]" CHANGELOG.md; then
          sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | sed '$d' > release_notes.md
        else
          echo "Release $VERSION" > release_notes.md
          echo "" >> release_notes.md
          echo "See [CHANGELOG.md](CHANGELOG.md) for details." >> release_notes.md
        fi

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.get_version.outputs.VERSION }}
        body_path: release_notes.md
        draft: false
        prerelease: false

    - name: Upload Python wheel
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./python/dist/fursight_sdk-${{ steps.get_version.outputs.VERSION }}-py3-none-any.whl
        asset_name: fursight_sdk-${{ steps.get_version.outputs.VERSION }}-py3-none-any.whl
        asset_content_type: application/zip

    - name: Upload Python source distribution
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./python/dist/fursight-sdk-${{ steps.get_version.outputs.VERSION }}.tar.gz
        asset_name: fursight-sdk-${{ steps.get_version.outputs.VERSION }}.tar.gz
        asset_content_type: application/gzip

  notify-success:
    name: Notify Release Success
    runs-on: ubuntu-latest
    needs: [create-github-release]
    if: success()

    steps:
    - name: Extract version from tag
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

    - name: Notify success
      run: |
        echo "üéâ Successfully released FurSight SDK v${{ steps.get_version.outputs.VERSION }}"
        echo "üì¶ Python package: https://pypi.org/project/fursight-sdk/${{ steps.get_version.outputs.VERSION }}/"
        echo "üì¶ JavaScript package: https://www.npmjs.com/package/@fursight/sdk/v/${{ steps.get_version.outputs.VERSION }}"
        echo "üè∑Ô∏è GitHub release: https://github.com/OpenOvation/FurSight-SDK/releases/tag/${{ steps.get_version.outputs.VERSION }}"

  notify-failure:
    name: Notify Release Failure
    runs-on: ubuntu-latest
    needs: [publish-python, publish-javascript, create-github-release]
    if: failure()

    steps:
    - name: Extract version from tag
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

    - name: Notify failure
      run: |
        echo "‚ùå Failed to release FurSight SDK v${{ steps.get_version.outputs.VERSION }}"
        echo "Please check the workflow logs and try again."
